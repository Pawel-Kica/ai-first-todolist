---
alwaysApply: false
---

---

## Simple Plan

### Simple Plan — Guidelines

- Provide only what is necessary to execute. Keep it brief and outcome-oriented.
- Structure your plan exactly in this order: Context → Feature → Required changes.
- Reference code using @ file paths from the repo root (e.g., `@src/components/...`).
- For this frontend-only app, focus on component, hook, and type changes.
- Output: Save the final plan as a markdown file under `docs/plans`, named with the concise feature name (e.g., `docs/plans/add-task-tags.md`). The first line of the file must be the feature name.

### Template

```markdown
Title: <concise feature name>
File: docs/plans/<kebab-case-concise-feature-name>.md

Context

- What: <1–2 sentences explaining the change>
- Why: <business or technical driver>
- Scope: <what is in / out>

Feature

- Name: <feature name>
- Description: <concise description of behavior and user impact>

Required changes

IMPORTANT NOTE: For any section below, write "Not needed" if no changes are required.

- Types/Interfaces
  - @<path/to/types.ts>: <brief change description>
- Components
  - @<path/to/component.tsx>: <brief change description>
- Hooks/Logic
  - @<path/to/hook.ts>: <brief change description>
- Styling
  - @<path/to/styles>: <styling updates needed>
- Anything else
  - Not needed (unless really required)
```

### Example - Add Ability to Tag Tasks

```markdown
Title: Add Ability to Tag Tasks
File: docs/plans/add-task-tags.md

Context

- What: Add optional tags field to todos to allow categorization and better organization.
- Why: Users need to categorize and filter tasks by topics/projects for better organization.
- Scope: Todo interface, form components, filtering logic. No backend changes needed.

Feature

- Name: Task Tags
- Description: Users can add/remove multiple tags to tasks. Tags are displayed as colored badges and can be used for filtering. Tags are stored as string array in the todo object.

Required changes

- Types/Interfaces
  - @src/types/todo.ts: add optional `tags: string[]` field to Todo interface; add tag filter to TodoFilters interface
- Components
  - @src/components/AddTaskForm.tsx: add tag input field with add/remove functionality and tag suggestions
  - @src/components/TodoItem.tsx: display tags as colored badges below description
  - @src/components/TodoFilters.tsx: add tag filter dropdown with multi-select capability
  - @src/components/TagInput.tsx: new component for tag input with autocomplete and validation
  - @src/components/TagBadge.tsx: new component for displaying individual tags with consistent colors
- Hooks/Logic
  - @src/hooks/use-todos.ts: update addTodo to handle tags; add tag filtering logic to getFilteredTodos; add helper functions for tag management
```

---

## name: Simple Plan

### Simple Plan — Guidelines

- Provide only what is necessary to execute. Keep it brief and outcome-oriented.
- Structure your plan exactly in this order: Context → Feature → Required changes.
- Reference code using @ file paths from the repo root (e.g., `@src/components/...`).
- For this frontend-only app, focus on component, hook, and type changes.
- Output: Save the final plan as a markdown file under `docs/plans`, named with the concise feature name (e.g., `docs/plans/add-task-tags.md`). The first line of the file must be the feature name.

### Template

```markdown
Title: <concise feature name>
File: docs/plans/<kebab-case-concise-feature-name>.md

Context

- What: <1–2 sentences explaining the change>
- Why: <business or technical driver>
- Scope: <what is in / out>

Feature

- Name: <feature name>
- Description: <concise description of behavior and user impact>

Required changes

- Types/Interfaces
  - @<path/to/types.ts>: <brief change description>
- Components
  - @<path/to/component.tsx>: <brief change description>
- Hooks/Logic
  - @<path/to/hook.ts>: <brief change description>
- Styling (if needed)
  - @<path/to/styles>: <styling updates needed>
```

### Example - Add Ability to Tag Tasks

```markdown
Title: Add Ability to Tag Tasks
File: docs/plans/add-task-tags.md

Context

- What: Add optional tags field to todos to allow categorization and better organization.
- Why: Users need to categorize and filter tasks by topics/projects for better organization.
- Scope: Todo interface, form components, filtering logic. No backend changes needed.

Feature

- Name: Task Tags
- Description: Users can add/remove multiple tags to tasks. Tags are displayed as colored badges and can be used for filtering. Tags are stored as string array in the todo object.

Required changes

- Types/Interfaces
  - @src/types/todo.ts: add optional `tags: string[]` field to Todo interface; add tag filter to TodoFilters interface
- Components
  - @src/components/AddTaskForm.tsx: add tag input field with add/remove functionality and tag suggestions
  - @src/components/TodoItem.tsx: display tags as colored badges below description
  - @src/components/TodoFilters.tsx: add tag filter dropdown with multi-select capability
  - @src/components/TagInput.tsx: new component for tag input with autocomplete and validation
  - @src/components/TagBadge.tsx: new component for displaying individual tags with consistent colors
- Hooks/Logic
  - @src/hooks/use-todos.ts: update addTodo to handle tags; add tag filtering logic to getFilteredTodos; add helper functions for tag management
```
